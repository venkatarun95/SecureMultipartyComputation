import argparse
import os
import pickle
import subprocess
import sys
import threading
import time

config = {
    'classpath': '../assets/Scapi-2.4.jar::../assets/commons-exec-1.2.jar:../assets/bcprov-jdk16-146.jar:../lib/hamcrest-core-1.3.jar:../assets/activemq-all-5.9.1.jar:../lib/jpbc-api-2.0.0.jar:../lib/jpbc-plaf-2.0.0.jar:/usr/share/java/mysql-connector-java.jar:../src',
    'lib_path': '../assets/:/usr/ssl/lib/',
}

# To be decided at run-time
# - parallelism - number of server replicas
# - server_addrs - read from a file generated by setup-servers.py
# - mode - one of ['register', 'file'] denoting which operation to request
# - keydir - directory in which keys are stored
# - num_requests - number of requests to make per replica
params = {}

def init_params():
    parser = argparse.ArgumentParser('python run-client.py')
    parser.add_argument('-m', '--mode', help='Mode to operate in [register|file]')
    parser.add_argument('-c', '--config-file', help='File containing server information')
    parser.add_argument('-d', '--key-dir', help='Directory where key files are stored/to be stored')
    parser.add_argument('-n', '--num-req', help='Number of requests to make', type=int, default=10)
    args = parser.parse_args()

    f = open(args.config_file, 'r')
    params['server_addrs'] = pickle.load(f)
    params['parallelism'] = len(params['server_addrs'])
    params['mode'] = args.mode
    params['keydir'] = args.key_dir
    params['num_requests'] = args.num_req

class RunClient (threading.Thread):
    def __init__(self, replica_id):
        threading.Thread.__init__(self)
        self.replica_id = replica_id

    def run(self):
        # Prepare the address string
        addr_str = '::'.join(['%s:%d' % (x[0], x[1]) for x in params['server_addrs'][self.replica_id]])
        for req in range(params['num_requests']):
            if params['mode'] == 'register':
                args = ['register', os.path.join('keydir',
                                                 'key-%d-%d.key' % (self.replica_id, req))]

            start_time = time.time()
            subprocess.call(['java', '-classpath', config['classpath'],
                             '-Djava.library.path=%s' % config['lib_path'],
                             'client.Client', addr_str] + args)
            elapsed_time = time.time() - start_time
            print("Elapsed time: %f" % elapsed_time)

if __name__ == "__main__":
    init_params()
    clients = []
    for replica_id in range(params['parallelism']):
        client = RunClient(replica_id)
        client.start()
        clients.append(client)

    for client in clients:
        client.join()
